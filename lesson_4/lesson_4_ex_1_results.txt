Во всех вариантах реализации алгоритма прослеживается линейная асимптотика.
По результатам тестов следует, что первый вариант наилучший,
потому что:
- в первом варианте не используется рекурсивный вызов функций
- сравнение чисел осуществляется за один проход цикла
- не тратися время на формирование и сохранение промежуточных списков

Во втором варианте:
- явная потеря времени на рекурсивные вызовы при сортировке списка
- заметная потеря времени на формирование промежуточных списков "append"

Третий вариант:
- встроенная функция сортировки работает явно лучше, чем самописная из варианта 2
- сортировка списка большой длины заметно медленнее, чем один проход по списку в цикле как в варианте 1


# Вариант 1

# min_(-1000, 1000, 1000) - 0.5371370000066236
# min_(-2000, 2000, 2000) - 1.0762800000375137
# min_(-3000, 3000, 3000) - 1.662141899985727
# min_(-4000, 4000, 4000) - 2.1587056999560446
# min_(-5000, 5000, 5000) - 2.8309672999894246
# min_(-6000, 6000, 6000) - 3.3369478000095114
# min_(-7000, 7000, 7000) - 3.800164600019343
# min_(-8000, 8000, 8000) - 4.333057900017593
# min_(-9000, 9000, 9000) - 5.18126929999562
# min_(-10000, 10000, 10000) - 5.700779700011481


# cProfile.run(f'min_(-1_000_000, 1_000_000, 1_000_000)')
#          8048473 function calls in 1.880 seconds
#
#    Ordered by: standard name
#
#    ncalls  tottime  percall  cumtime  percall filename:lineno(function)
#         1    0.007    0.007    1.880    1.880 <string>:1(<module>)
#         1    0.073    0.073    1.873    1.873 lesson_4_ex_1_v1.py:12(min_)
#         1    0.200    0.200    1.800    1.800 lesson_4_ex_1_v1.py:13(<listcomp>)
#   1000000    0.348    0.000    0.476    0.000 random.py:239(_randbelow_with_getrandbits)
#   1000000    0.744    0.000    1.377    0.000 random.py:292(randrange)
#   1000000    0.222    0.000    1.600    0.000 random.py:366(randint)
#   3000000    0.157    0.000    0.157    0.000 {built-in method _operator.index}
#         1    0.000    0.000    1.880    1.880 {built-in method builtins.exec}
#   1000000    0.055    0.000    0.055    0.000 {method 'bit_length' of 'int' objects}
#         1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
#   1048468    0.074    0.000    0.074    0.000 {method 'getrandbits' of '_random.Random' objects}

# Вариант 2

# min_(-1000, 1000, 1000)   -  1.3685262999497354
# min_(-2000, 2000, 2000)   -  2.8285630000173114
# min_(-3000, 3000, 3000)   -  4.481590499985032
# min_(-4000, 4000, 4000)   -  6.153779899992514
# min_(-5000, 5000, 5000)   -  7.980420400039293
# min_(-6000, 6000, 6000)   -  9.701360999955796
# min_(-7000, 7000, 7000)   - 11.391012200037949
# min_(-8000, 8000, 8000)   - 13.079735599982087
# min_(-9000, 9000, 9000)   - 14.926024800050072
# min_(-10000, 10000, 10000)- 16.647122299997136


# cProfile.run(f'min_(-1_000_000, 1_000_000, 1_000_000)')
#          34985407 function calls (33867869 primitive calls) in 7.615 seconds
#
#    Ordered by: standard name
#
#    ncalls  tottime  percall  cumtime  percall filename:lineno(function)
#         1    0.029    0.029    7.615    7.615 <string>:1(<module>)
#         1    0.006    0.006    7.585    7.585 lesson_4_ex_1_v2.py:12(min_)
#         1    0.200    0.200    1.783    1.783 lesson_4_ex_1_v2.py:13(<listcomp>)
# 1117539/1    4.355    0.000    5.796    5.796 lesson_4_ex_1_v2.py:18(quick_sort)
#   1000000    0.345    0.000    0.474    0.000 random.py:239(_randbelow_with_getrandbits)
#   1000000    0.737    0.000    1.367    0.000 random.py:292(randrange)
#   1000000    0.216    0.000    1.583    0.000 random.py:366(randint)
#   3000000    0.156    0.000    0.156    0.000 {built-in method _operator.index}
#         1    0.000    0.000    7.615    7.615 {built-in method builtins.exec}
#   1117539    0.061    0.000    0.061    0.000 {built-in method builtins.len}
#  24142788    1.343    0.000    1.343    0.000 {method 'append' of 'list' objects}
#   1000000    0.055    0.000    0.055    0.000 {method 'bit_length' of 'int' objects}
#         1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
#   1048767    0.074    0.000    0.074    0.000 {method 'getrandbits' of '_random.Random' objects}
#    558769    0.037    0.000    0.037    0.000 {method 'pop' of 'list' objects}

# Вариант 3

# min_(-1000, 1000, 1000) - 0.5538517000386491
# min_(-2000, 2000, 2000) - 1.1054425000329502
# min_(-3000, 3000, 3000) - 1.7196660000481643
# min_(-4000, 4000, 4000) - 2.235179600014817
# min_(-5000, 5000, 5000) - 2.961620200017933
# min_(-6000, 6000, 6000) - 3.4728807999636047
# min_(-7000, 7000, 7000) - 4.047356499999296
# min_(-8000, 8000, 8000) - 4.5958288999972865
# min_(-9000, 9000, 9000) - 5.520084500021767
# min_(-10000, 10000, 10000) - 6.104738200025167


# cProfile.run(f'min_(-1_000_000, 1_000_000, 1_000_000)')
#          8049056 function calls in 2.072 seconds
#
#    Ordered by: standard name
#
#    ncalls  tottime  percall  cumtime  percall filename:lineno(function)
#         1    0.031    0.031    2.072    2.072 <string>:1(<module>)
#         1    0.000    0.000    2.041    2.041 lesson_4_ex_1_v3.py:12(min_)
#         1    0.208    0.208    1.841    1.841 lesson_4_ex_1_v3.py:13(<listcomp>)
#   1000000    0.358    0.000    0.490    0.000 random.py:239(_randbelow_with_getrandbits)
#   1000000    0.754    0.000    1.405    0.000 random.py:292(randrange)
#   1000000    0.227    0.000    1.632    0.000 random.py:366(randint)
#   3000000    0.162    0.000    0.162    0.000 {built-in method _operator.index}
#         1    0.000    0.000    2.072    2.072 {built-in method builtins.exec}
#         1    0.201    0.201    0.201    0.201 {built-in method builtins.sorted}
#   1000000    0.057    0.000    0.057    0.000 {method 'bit_length' of 'int' objects}
#         1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
#   1049050    0.075    0.000    0.075    0.000 {method 'getrandbits' of '_random.Random' objects}


